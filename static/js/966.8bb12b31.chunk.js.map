{"version":3,"file":"static/js/966.8bb12b31.chunk.js","mappings":"gKACA,EAA0B,yBAA1B,EAAgE,4BAAhE,EAAuG,0B,UCAvG,GAAiB,E,SCQjB,MAPA,SAAgBA,GACZ,OACI,gBAAKC,UAAWC,EAAAA,OAAS,UACrB,SAAC,KAAO,CAACD,UAAWC,EAAAA,aAAgBC,GAAI,YAAcH,EAAMI,GAAG,SAAEJ,EAAMK,QAGnF,ECPA,GAAiB,E,UCchB,MAZD,SAAiBL,GAEb,OAEI,gBAAKC,UAAWC,EAAAA,QAAU,UACtB,gBAAKD,UAAWC,EAAAA,KAAO,SAClBF,EAAMM,WAKtB,E,UCYD,IAAMC,EAAc,SAACP,GAAW,IAAD,EAC3B,GAMIQ,EAAAA,EAAAA,MALAC,EAAQ,EAARA,SAEIC,EAAM,EADVC,UACID,OAEJE,EAAY,EAAZA,aAEJ,OACI,kBAAMC,SAAUD,EAAaZ,EAAMa,UAAU,WAC7C,6BAAQ,YAER,0BAAOC,KAAK,QAAWL,EAAS,iBAAkB,CAACM,SAAS,qLAAqCC,UAAW,CACxGC,MAAO,EACPX,QAAQ,0GAGZ,4BAAY,OAANI,QAAM,IAANA,OAAM,EAANA,EAAQQ,kBAAkB,0BAAU,OAANR,QAAM,IAANA,GAAsB,QAAhB,EAANA,EAAQQ,sBAAc,WAAhB,EAAN,EAAwBZ,UAAW,QAAQ,OAAM,QACrF,kBAAOQ,KAAK,aAGpB,EACA,EA3CA,SAAiBd,GACb,IAIImB,EAAcnB,EAAMoB,MAAMC,WAC7BC,KAAI,SAAAC,GAAG,OAAI,SAAC,EAAM,CAAClB,KAAMkB,EAAIlB,KAAMD,GAAImB,EAAInB,IAAK,IAC3CoB,EAAcxB,EAAMoB,MAAMK,YAC/BH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAO,CAACpB,QAASoB,EAAEpB,SAAW,IACzC,OACI,iBAAKL,UAAWC,EAAU,WACtB,gBAAKD,UAAWC,EAAa,SAC1BiB,KAEF,gBAAKlB,UAAWC,EAAW,SACvBsB,KAEL,SAACjB,EAAW,CAACM,SAhBJ,SAACc,GACd3B,EAAM4B,WAAWD,EAAQT,gBACzBW,QAAQC,IAAIH,EAChB,MAgBJ,E,oECrBII,EAA0B,SAACX,GAAK,MAAM,CACtCY,QAASZ,EAAMa,SAASD,QACxBE,OAAQd,EAAMe,KAAKD,OACtB,ECMKE,GAAmBC,E,QAAAA,KACrBC,EAAAA,EAAAA,KATkB,SAAClB,GACvB,MAAM,CACFA,MAAQA,EAAMmB,WACjB,IACwB,SAACC,GACtB,MAAM,CACNZ,WAAa,SAACa,GAASD,GAASE,EAAAA,EAAAA,GAAwBD,GAAM,EACjE,KDJ+B,SAACE,GAAc,IACrCC,EAAiB,qGAMjB,OANiB,8BACnB,WACI,OAAIC,KAAK7C,MAAMkC,QAGR,SAACS,GAAS,UAAKE,KAAK7C,SAFpB,SAAC,KAAQ,CAACG,GAAI,UAGxB,KAAC,EANiB,CAAS2C,EAAAA,WAShC,OADmCR,EAAAA,EAAAA,IAAQP,EAARO,CAAiCM,EAExE,GCNyBP,CAGvBU,GACF,G","sources":["webpack://travel/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Dialog/Dialog.module.css","components/Dialogs/Dialog/Dialog.jsx","components/Dialogs/Message/Message.module.css","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","hoc/AuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__-78O9\",\"dialogItem\":\"Dialogs_dialogItem__Ff9i2\",\"messages\":\"Dialogs_messages__CjK4E\"};","// extracted by mini-css-extract-plugin\nexport default {};","import { NavLink } from 'react-router-dom'\r\nimport s from './Dialog.module.css' \r\nfunction Dialog(props){ \r\n    return( \r\n        <div className={s.dialog}> \r\n            <NavLink className={s.dialog__item} to={'/dialogs/' + props.id}>{props.name}</NavLink> \r\n        </div>\r\n    )\r\n} \r\nexport default Dialog","// extracted by mini-css-extract-plugin\nexport default {};","import s from './Message.module.css'\r\nimport React from 'react' \r\n\r\nfunction Message(props){ \r\n    \r\n    return(   \r\n\r\n        <div className={s.message}> \r\n            <div className={s.item}> \r\n                {props.message} \r\n            </div> \r\n           \r\n        </div>\r\n    )\r\n } \r\n export default Message ","import s from './Dialogs.module.css' \r\nimport Dialog from './Dialog/Dialog' \r\nimport Message from './Message/Message'  \r\nimport { useForm } from 'react-hook-form' \r\nimport React from 'react'\r\nfunction Dialogs(props){  \r\n    const onSubmit = (dataObj) =>{ \r\n        props.addMessage(dataObj.newMessageText) \r\n        console.log(dataObj)\r\n    }\r\n    let dialogsElem = props.state.dialogItem \r\n    .map(arg => <Dialog name={arg.name} id={arg.id}/> ); \r\n    const messageElem = props.state.messageItem \r\n    .map(m => <Message message={m.message} />  )\r\n    return(\r\n        <div className={s.dialogs}> \r\n            <div className={s.dialogItem}>          \r\n              {dialogsElem} \r\n            </div>\r\n             <div className={s.messages}>  \r\n                {messageElem}  \r\n            </div>   \r\n            <DialogForms onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}  \r\nconst DialogForms = (props) => { \r\n    const { \r\n        register, \r\n        formState: { \r\n            errors\r\n        }, \r\n        handleSubmit\r\n    } = useForm()\r\n    return( \r\n        <form onSubmit={handleSubmit(props.onSubmit)}>  \r\n        <label > \r\n        Message: \r\n        <input type=\"text\" {...register('newMessageText', {required:'Поле не объязательно к заполнению', minLength: { \r\n            value: 3, \r\n            message: `Минимум 3 символов `\r\n        }})} /> \r\n        </label> \r\n        <div>{errors?.newMessageText && <p>{errors?.newMessageText?.message || 'error'} </p>} </div>\r\n        <input type=\"submit\" />\r\n        </form>\r\n    )\r\n}\r\nexport default Dialogs","import React  from \"react\" \r\nimport { Navigate } from \"react-router-dom\"\r\nimport { connect } from \"react-redux\"\r\n\r\nlet mapStateToPropsRedirect = (state) => ({ \r\n    profile: state.postPage.profile,\r\n    isAuth: state.auth.isAuth\r\n})  \r\nexport const withAuthRedirect = (Component) =>{ \r\n    class RedirectComponent extends React.Component{ \r\n        render(){ \r\n            if(!this.props.isAuth) {\r\n            return <Navigate to={'/login'}/>\r\n            } \r\n            return <Component {...this.props}/>\r\n         }\r\n        } \r\n    let ConnectAuthRedirectComponent = connect(mapStateToPropsRedirect)(RedirectComponent)\r\n    return ConnectAuthRedirectComponent \r\n}\r\n\r\n","import Dialogs from './Dialogs'\r\nimport { addMessageActionCreator} from '../../redux/dialogsReducer' \r\nimport { connect } from 'react-redux'\r\nimport { withAuthRedirect } from '../../hoc/AuthRedirect'\r\nimport { compose } from 'redux'\r\nlet mapStateToProps = (state) =>{  \r\nreturn{ \r\n    state : state.dialogPage, \r\n}}  \r\nlet mapDispatchToProps = (dispatch) =>{ \r\n    return{  \r\n    addMessage:  (text) =>{dispatch(addMessageActionCreator(text))}    \r\n}}\r\nconst DialogsContainer = compose(  \r\n    connect(mapStateToProps,mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\nexport default DialogsContainer"],"names":["props","className","s","to","id","name","message","DialogForms","useForm","register","errors","formState","handleSubmit","onSubmit","type","required","minLength","value","newMessageText","dialogsElem","state","dialogItem","map","arg","messageElem","messageItem","m","dataObj","addMessage","console","log","mapStateToPropsRedirect","profile","postPage","isAuth","auth","DialogsContainer","compose","connect","dialogPage","dispatch","text","addMessageActionCreator","Component","RedirectComponent","this","React","Dialogs"],"sourceRoot":""}