{"version":3,"file":"static/js/515.0cbf7b7c.chunk.js","mappings":"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","sources":["webpack://travel/./src/components/Profile/Profile.module.css?b512","webpack://travel/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Posts/Posts.module.css","components/Profile/Posts/MyPosts/MyPosts.module.css","components/Profile/Posts/MyPosts/MyPosts.jsx","components/Profile/Posts/Posts.jsx","components/Profile/Posts/PostsContainer.jsx","components/Profile/Profile.jsx","redux/profile-Selector.js","components/Profile/ProfileContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__aV1X0\"};","// extracted by mini-css-extract-plugin\nexport default {\"info\":\"ProfileInfo_info__QntLp\",\"info__image\":\"ProfileInfo_info__image__KxeSo\",\"bg__img\":\"ProfileInfo_bg__img__Kn+qU\",\"ava\":\"ProfileInfo_ava__Xqbam\"};","\r\nimport { useEffect, useState } from \"react\"\r\nconst ProfileStatus = ({updateStatusThunkC,...props})=>{  \r\n    const [editMode, setEditMode] = useState(false) \r\n    const [status, setStatus] = useState(props.status) \r\n    useEffect(() =>{ \r\n        setStatus(props.status)\r\n    },[props.status]) \r\n    const deactivedEditMode =() =>{ \r\n        setEditMode(false)\r\n        updateStatusThunkC(status)\r\n   }\r\n   return( \r\n       <div> \r\n            {!editMode &&  <div onDoubleClick={() => setEditMode(true)}><span>{props.status || 'no Status'}</span></div>} \r\n            {editMode &&  <div><input onChange={(e)=> setStatus(e.target.value) } autoFocus={true} onBlur={deactivedEditMode} type=\"text\" value={status} /></div>} \r\n                    \r\n        </div> \r\n    )\r\n}\r\nexport default ProfileStatus ","import Preloader from '../../common/Preloader'\r\nimport s from './ProfileInfo.module.css' \r\nimport ProfileStatus from './ProfileStatus'\r\nfunction ProfileInfo({profile,status,...props}){  \r\n    if(!profile){ \r\n        return <Preloader/>\r\n    } \r\n    return(  \r\n        \r\n        <div className={s.info}>   \r\n        \r\n        <div> NickName: {profile.fullName}</div>\r\n            <div className={s.info__image}> <img  className={s.bg__img} src={profile.photos.small} alt=\"Background Img\" /></div> \r\n            <div className={s.item}> <img className={s.ava} src={profile.photos.large} alt='Ava'></img></div>  \r\n            <div> \r\n                Обо мне: {profile.aboutMe}\r\n            </div>  \r\n            <ProfileStatus status={status} updateStatusThunkC={props.updateStatusThunkC}/> \r\n            <div>Контакты: \r\n                <ul> \r\n                    <li>Вк {profile.contacts.vk}</li>\r\n                    <li>Инста {profile.contacts.instagram}</li>\r\n                    <li>Твитер {profile.contacts.twitter} </li>\r\n                </ul>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n} \r\nexport default ProfileInfo","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","import s from './MyPosts.module.css' \r\nfunction MyPosts(props){ \r\n    return( \r\n        <div className={s.mypost} > \r\n            <div className={s.item}>{props.message}</div> \r\n            <div className={s.item}>{props.likes}</div> \r\n            \r\n         </div>\r\n    )\r\n} \r\nexport default MyPosts","import s from './Posts.module.css' \r\nimport MyPosts from './MyPosts/MyPosts' \r\nimport React from 'react' \r\nimport { useForm } from 'react-hook-form' \r\nconst Posts = React.memo(({post,...props}) =>{       \r\n        const myPostElem = post.myPostItem.map((post, index) => <MyPosts key={index+post} message={post.message} likes={post.likes}/>)\r\n        return(\r\n        <div className={s.post}>  \r\n            <PostForm {...props}/>\r\n            <div className={s.itemPost}> \r\n                {myPostElem}\r\n            </div> \r\n        </div>\r\n    )\r\n\r\n})\r\nconst PostForm = (props )  => { \r\n    const onSubmit = (dataObj) => {  \r\n        props.addPost(dataObj.newPostText)  \r\n        reset()   \r\n    }\r\n    \r\n    const {  \r\n        register, \r\n        formState: { \r\n            errors, \r\n            isValid\r\n        }, \r\n        handleSubmit, \r\n        reset\r\n    } = useForm({ \r\n        mode: 'onBlur'\r\n    })\r\n    \r\n    return( \r\n        <form onSubmit={handleSubmit(onSubmit)}> \r\n            <div><input type=\"text\" {...register('newPostText', {\r\n                minLength : { \r\n                value : 1, \r\n                message: 'Минимально 1 символ'\r\n             }, maxLength:{ \r\n                 value: 15, \r\n                 message: 'Максимально 15 символов'\r\n                } ,\r\n            })} /></div> \r\n            {errors?.newPostText && <p>{errors?.newPostText?.message || 'Erorr'} </p>}       \r\n            <input type=\"submit\" disabled={!isValid}/> \r\n        </form>\r\n    )\r\n\r\n}\r\n\r\n export default Posts","\r\nimport {addPostActionCreator} from '../../../redux/profileReducer'\r\nimport { connect } from 'react-redux'\r\nimport Posts from './Posts'\r\n\r\n\r\nlet mapStateToProps = (state) =>{ \r\n    return{ \r\n        post : state.postPage\r\n    }\r\n    } \r\n    let mapDispatchToProps = (dispatch) =>{ \r\n    return{ \r\n        addPost:  (text) =>{dispatch(addPostActionCreator(text))}    \r\n    }\r\n    }\r\nconst PostsContainer = connect( mapStateToProps,mapDispatchToProps)(Posts)\r\nexport default PostsContainer","import s from './Profile.module.css'  \r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport PostsContainer from './Posts/PostsContainer'\r\nimport Preloader from '../common/Preloader'\r\nfunction Profile(props){   \r\n    if(!props.profile){ \r\n        return <Preloader/>\r\n    }  \r\n\r\n    return( \r\n        <div className={s.profile}> \r\n            <ProfileInfo {...props}/>\r\n            <PostsContainer />\r\n        </div>\r\n    )\r\n} \r\nexport default Profile \r\n\r\n","\r\nexport const getProfileSelector = (state) =>{ \r\n    return state.postPage.profile\r\n}\r\nexport const getStatusSelector = (state) =>{ \r\n    return state.postPage.status\r\n}  \r\nexport const getUserIDSelector = (state) =>{ \r\n    return state.auth.userId\r\n}  \r\nexport const getAuthSelector = (state) =>{ \r\n    return state.auth.isAuth\r\n} "," \r\nimport React from 'react'\r\nimport Profile from './Profile'\r\n\r\nimport { getUsersProfileThunkC,getStatusThunkC, updateStatusThunkC } from '../../redux/profileReducer';\r\nimport { connect } from 'react-redux';\r\nimport {  useLocation, useNavigate, useParams } from 'react-router-dom'; \r\nimport { compose } from 'redux';\r\nimport { getAuthSelector, getProfileSelector, getStatusSelector, getUserIDSelector } from '../../redux/profile-Selector';\r\n\r\nclass ProfileContainer extends React.Component{ \r\n    componentDidMount(){ \r\n        let userId = this.props.router.params.userId; \r\n        if(!userId){  \r\n            userId= this.props.loginnedUserId\r\n            if(!userId){  \r\n                this.props.router.navigate('/login')\r\n            }\r\n        }\r\n        this.props.getUsersProfileThunkC(userId)\r\n        this.props.getStatusThunkC(userId)\r\n    }\r\n    render(){   \r\n        return( \r\n            <Profile status={this.props.status} profile={this.props.profile} updateStatusThunkC={this.props.updateStatusThunkC}  />\r\n        )\r\n}\r\n}  \r\n\r\n  \r\n\r\nlet mapStateToProps = (state) => ({ \r\n    profile: getProfileSelector(state),\r\n    status: getStatusSelector(state), \r\n    loginnedUserId: getUserIDSelector(state), \r\n    isAuth: getAuthSelector(state)\r\n})   \r\n\r\n\r\nfunction withRouter(Component) {\r\n    function ComponentWithRouterProp(props) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams(); \r\n        \r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{ location, navigate, params }}\r\n            />\r\n        );\r\n    }\r\n\r\n    return ComponentWithRouterProp;\r\n} \r\n\r\n\r\n\r\nexport default compose( \r\n    connect(mapStateToProps, {getUsersProfileThunkC, getStatusThunkC,updateStatusThunkC}), \r\n    withRouter,  \r\n    // withAuthRedirect\r\n)(ProfileContainer) "],"names":["updateStatusThunkC","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","target","value","autoFocus","onBlur","type","profile","className","s","fullName","src","photos","small","alt","large","aboutMe","contacts","vk","instagram","twitter","Preloader","message","likes","Posts","React","post","myPostElem","myPostItem","map","index","PostForm","useForm","mode","register","formState","errors","isValid","handleSubmit","reset","onSubmit","dataObj","addPost","newPostText","minLength","maxLength","disabled","connect","state","postPage","dispatch","text","addPostActionCreator","getProfileSelector","getStatusSelector","getUserIDSelector","auth","userId","getAuthSelector","isAuth","ProfileContainer","this","router","params","loginnedUserId","navigate","getUsersProfileThunkC","getStatusThunkC","compose","Component","location","useLocation","useNavigate","useParams"],"sourceRoot":""}